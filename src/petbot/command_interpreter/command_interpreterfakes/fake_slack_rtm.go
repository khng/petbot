// Code generated by counterfeiter. DO NOT EDIT.
package command_interpreterfakes

import (
	"sync"

	"github.com/nlopes/slack"
)

type FakeSlackRTM struct {
	GetInfoStub        func() *slack.Info
	getInfoMutex       sync.RWMutex
	getInfoArgsForCall []struct{}
	getInfoReturns     struct {
		result1 *slack.Info
	}
	getInfoReturnsOnCall map[int]struct {
		result1 *slack.Info
	}
	SendMessageStub        func(message *slack.OutgoingMessage)
	sendMessageMutex       sync.RWMutex
	sendMessageArgsForCall []struct {
		message *slack.OutgoingMessage
	}
	NewOutgoingMessageStub        func(string, string) *slack.OutgoingMessage
	newOutgoingMessageMutex       sync.RWMutex
	newOutgoingMessageArgsForCall []struct {
		arg1 string
		arg2 string
	}
	newOutgoingMessageReturns struct {
		result1 *slack.OutgoingMessage
	}
	newOutgoingMessageReturnsOnCall map[int]struct {
		result1 *slack.OutgoingMessage
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSlackRTM) GetInfo() *slack.Info {
	fake.getInfoMutex.Lock()
	ret, specificReturn := fake.getInfoReturnsOnCall[len(fake.getInfoArgsForCall)]
	fake.getInfoArgsForCall = append(fake.getInfoArgsForCall, struct{}{})
	fake.recordInvocation("GetInfo", []interface{}{})
	fake.getInfoMutex.Unlock()
	if fake.GetInfoStub != nil {
		return fake.GetInfoStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getInfoReturns.result1
}

func (fake *FakeSlackRTM) GetInfoCallCount() int {
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	return len(fake.getInfoArgsForCall)
}

func (fake *FakeSlackRTM) GetInfoReturns(result1 *slack.Info) {
	fake.GetInfoStub = nil
	fake.getInfoReturns = struct {
		result1 *slack.Info
	}{result1}
}

func (fake *FakeSlackRTM) GetInfoReturnsOnCall(i int, result1 *slack.Info) {
	fake.GetInfoStub = nil
	if fake.getInfoReturnsOnCall == nil {
		fake.getInfoReturnsOnCall = make(map[int]struct {
			result1 *slack.Info
		})
	}
	fake.getInfoReturnsOnCall[i] = struct {
		result1 *slack.Info
	}{result1}
}

func (fake *FakeSlackRTM) SendMessage(message *slack.OutgoingMessage) {
	fake.sendMessageMutex.Lock()
	fake.sendMessageArgsForCall = append(fake.sendMessageArgsForCall, struct {
		message *slack.OutgoingMessage
	}{message})
	fake.recordInvocation("SendMessage", []interface{}{message})
	fake.sendMessageMutex.Unlock()
	if fake.SendMessageStub != nil {
		fake.SendMessageStub(message)
	}
}

func (fake *FakeSlackRTM) SendMessageCallCount() int {
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	return len(fake.sendMessageArgsForCall)
}

func (fake *FakeSlackRTM) SendMessageArgsForCall(i int) *slack.OutgoingMessage {
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	return fake.sendMessageArgsForCall[i].message
}

func (fake *FakeSlackRTM) NewOutgoingMessage(arg1 string, arg2 string) *slack.OutgoingMessage {
	fake.newOutgoingMessageMutex.Lock()
	ret, specificReturn := fake.newOutgoingMessageReturnsOnCall[len(fake.newOutgoingMessageArgsForCall)]
	fake.newOutgoingMessageArgsForCall = append(fake.newOutgoingMessageArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("NewOutgoingMessage", []interface{}{arg1, arg2})
	fake.newOutgoingMessageMutex.Unlock()
	if fake.NewOutgoingMessageStub != nil {
		return fake.NewOutgoingMessageStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newOutgoingMessageReturns.result1
}

func (fake *FakeSlackRTM) NewOutgoingMessageCallCount() int {
	fake.newOutgoingMessageMutex.RLock()
	defer fake.newOutgoingMessageMutex.RUnlock()
	return len(fake.newOutgoingMessageArgsForCall)
}

func (fake *FakeSlackRTM) NewOutgoingMessageArgsForCall(i int) (string, string) {
	fake.newOutgoingMessageMutex.RLock()
	defer fake.newOutgoingMessageMutex.RUnlock()
	return fake.newOutgoingMessageArgsForCall[i].arg1, fake.newOutgoingMessageArgsForCall[i].arg2
}

func (fake *FakeSlackRTM) NewOutgoingMessageReturns(result1 *slack.OutgoingMessage) {
	fake.NewOutgoingMessageStub = nil
	fake.newOutgoingMessageReturns = struct {
		result1 *slack.OutgoingMessage
	}{result1}
}

func (fake *FakeSlackRTM) NewOutgoingMessageReturnsOnCall(i int, result1 *slack.OutgoingMessage) {
	fake.NewOutgoingMessageStub = nil
	if fake.newOutgoingMessageReturnsOnCall == nil {
		fake.newOutgoingMessageReturnsOnCall = make(map[int]struct {
			result1 *slack.OutgoingMessage
		})
	}
	fake.newOutgoingMessageReturnsOnCall[i] = struct {
		result1 *slack.OutgoingMessage
	}{result1}
}

func (fake *FakeSlackRTM) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	fake.newOutgoingMessageMutex.RLock()
	defer fake.newOutgoingMessageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSlackRTM) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
